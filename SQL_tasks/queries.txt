CREATE DATABASE `SQL_tasks` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;

CREATE TABLE `SQL_tasks`.`projects` ( `id` INT NOT NULL AUTO_INCREMENT ,  `name` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,    PRIMARY KEY  (`id`)) ENGINE = InnoDB;

CREATE TABLE `SQL_tasks`.`tasks` ( `id` INT NOT NULL AUTO_INCREMENT ,  `name` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,  `status` ENUM('new','viewed','postponed','completed') NOT NULL ,  `project_id` INT NULL ,    PRIMARY KEY  (`id`)) ENGINE = InnoDB;

ALTER TABLE `tasks` ADD FOREIGN KEY ( `project_id` ) REFERENCES `projects` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT


1. get all statuses, not repeating, alphabetically ordered
	// get array of all possible statuses
	SELECT SUBSTRING(COLUMN_TYPE,5) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='SQL_tasks' AND TABLE_NAME='tasks' AND COLUMN_NAME='status'

	// get all of the existing status
	SELECT `status` from `tasks` 
		GROUP BY `status` 
		ORDER BY `status` DESC

2. get the count of all tasks in each project, order by tasks count descending
	SELECT p.id, p.name as name, 
		(SELECT COUNT(*) FROM tasks AS t WHERE t.project_id = p.id) AS tasks_count 
	FROM projects AS p
		ORDER BY tasks_count DESC

3. get the count of all tasks in each project, order by projects names
	SELECT p.id, p.name as name, 
		(SELECT COUNT(*) FROM tasks AS t WHERE t.project_id = p.id) AS tasks_count 
	FROM projects AS p
		ORDER BY name

4. get the tasks for all projects having the name beginning with “N” letter
	SELECT t.id, t.name, t.status ,p.name as project_name 
		FROM tasks as t 
		LEFT JOIN projects as p ON t.project_id = p.id 
		WHERE p.name LIKE 'N%'

5. get the list of all projects containing the ‘a’ letter in the middle of the name, and show the tasks count near each project. Mention that there can exist projects without tasks and tasks with project_id=NULL
	SELECT p.id, p.name, 
		(SELECT COUNT(*) FROM tasks AS t WHERE t.project_id = p.id) AS tasks 
	FROM projects AS p
		WHERE p.name LIKE '%a%'

6. get the list of tasks with duplicate names. Order alphabetically
	SELECT t.name, COUNT(*) FROM tasks as t 
		LEFT JOIN projects as p ON t.project_id = p.id 
		GROUP BY t.name
		HAVING COUNT(*)>1
		ORDER BY name ASC

7. get the list of tasks having several exact matches of both name and status, from the project ‘Garage’. Order by matches count
	SELECT t.id, t.name, t.status ,p.name as project_name, COUNT(*) as duplicate_count
		FROM tasks as t 
	LEFT JOIN projects as p ON t.project_id = p.id 
	WHERE p.name LIKE 'Garage'
	GROUP BY t.status, t.name
	ORDER BY duplicate_count DESC

8. get the list of project names having more than 10 tasks in status ‘completed’. Order by project_id
	SELECT p.id, p.name, 
		(SELECT COUNT(*) FROM tasks AS t 
		WHERE t.project_id = p.id AND t.status = 'completed') as completed_tasks 
	FROM projects AS p
	HAVING completed_tasks >= 10
	ORDER By p.id